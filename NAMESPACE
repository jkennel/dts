# Generated by roxygen2: do not edit by hand

S3method(average_distance,dts_long)
S3method(average_time,dts_long)
S3method(bath_calibration,dts_long)
S3method(combine_by_symmetry,data.table)
S3method(combine_by_symmetry,dts_long)
S3method(combine_by_symmetry,numeric)
S3method(filter_noise,data.table)
S3method(filter_noise,numeric)
S3method(generate_report,character)
S3method(generate_report,dts_long)
S3method(get_temperature_breakpoint,dts_long)
S3method(get_time_type,data.table)
S3method(get_time_type,dts_long)
S3method(get_times,dts)
S3method(get_times,dts_long)
S3method(half_data,dts_long)
S3method(log_average_time,dts_long)
S3method(sample_distance,dts_long)
S3method(sample_times,dts_long)
S3method(select_distance,data.table)
S3method(select_distance,dts_long)
S3method(select_time,data.table)
S3method(select_time,dts_long)
S3method(select_time_ind,dts_long)
S3method(split_distance_type,dts_long)
S3method(subset_distance,data.table)
S3method(subset_distance,dts_long)
S3method(subset_time,data.table)
S3method(subset_time,dts_long)
S3method(time_breakpoints,default)
S3method(time_breakpoints,matrix)
S3method(to_matrix,data.table)
S3method(to_matrix,dts)
S3method(to_matrix,dts_long)
S3method(write_dts,dts_long)
S3method(write_dts_to_wellcad,dts_long)
export(add_classification)
export(add_heating_cooling)
export(average_distance)
export(average_time)
export(bath_calibration)
export(calibration_bath)
export(combine_by_symmetry)
export(compare_with_temperature)
export(cor_by_trace)
export(cor_with_trace)
export(correlate_with_temperature)
export(dates_r_to_matlab)
export(denoise_by_trace)
export(denoise_by_trace_2)
export(diff_by_trace)
export(dts_to_long)
export(dts_to_matlab)
export(dts_to_wide)
export(filter_noise)
export(find_coldspray)
export(find_in_xml)
export(find_reference)
export(find_water_bath)
export(fit_convolve)
export(fit_convolve2)
export(fit_heating_cooling)
export(fit_rlm)
export(generate_report)
export(get_bath_limits)
export(get_data_table)
export(get_distance_table)
export(get_distances)
export(get_dts_type)
export(get_end_time_from_type)
export(get_log_name_from_type)
export(get_n_skip_from_type)
export(get_start_time_from_type)
export(get_temperature_breakpoint)
export(get_time_table)
export(get_time_type)
export(get_times)
export(get_value_xml)
export(group_time)
export(half_data)
export(heated_groups)
export(heating_distance)
export(heating_time)
export(log_average_time)
export(log_group_time)
export(match_region)
export(pad_output)
export(plot_distances)
export(plot_heatmap)
export(plot_times)
export(process_classification)
export(process_terminal)
export(read_dts_xml)
export(read_dts_xml_2)
export(read_dts_xml_3)
export(read_dts_zip)
export(read_file_cpp)
export(read_one_xml)
export(refine_match)
export(resample_distance)
export(residual_variance_with_trace)
export(rolling_diff)
export(sample_distance)
export(sample_times)
export(select_distance)
export(select_time)
export(select_time_ind)
export(set_values_for_distance)
export(set_values_for_time)
export(set_zero_distance)
export(solve_arma)
export(split_distance_type)
export(subset_distance)
export(subset_time)
export(summarize_heating_cooling)
export(thermal_conductivity)
export(time_breakpoints)
export(to_duckdb)
export(to_matrix)
export(write_dts)
export(write_dts_to_wellcad)
export(xml_key)
importFrom(Rcpp,evalCpp)
importFrom(RcppParallel,RcppParallelLibs)
importFrom(anytime,anytime)
importFrom(arrow,open_dataset)
importFrom(arrow,to_duckdb)
importFrom(data.table,"%between%")
importFrom(data.table,data.table)
importFrom(data.table,fread)
importFrom(data.table,fwrite)
importFrom(data.table,nafill)
importFrom(data.table,rbindlist)
importFrom(data.table,set)
importFrom(data.table,setDT)
importFrom(data.table,setkey)
importFrom(data.table,setnames)
importFrom(data.table,shift)
importFrom(dplyr,collect)
importFrom(dplyr,group_by)
importFrom(dplyr,summarise)
importFrom(dplyr,tbl)
importFrom(dplyr,ungroup)
importFrom(fasttime,fastPOSIXct)
importFrom(glmnet,cv.glmnet)
importFrom(parallel,stopCluster)
importFrom(stats,na.omit)
importFrom(stringi,stri_match_first_regex)
importFrom(stringi,stri_match_last_regex)
importFrom(stringi,stri_replace_all_fixed)
useDynLib(dts, .registration = TRUE)
